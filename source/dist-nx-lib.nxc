/************************************************************************/
/*                                                                      */
/* Program Name: dist-nx-lib.nxc  */
/* ===========================                                          */
/*                                                                      */
/* Copyright (c) 2011 by mindsensors.com                                */
/* Email: info (<at>) mindsensors (<dot>) com                           */
/*                                                                      */
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; version 3 of the License.              */
/* Read the license at: http://www.gnu.org/licenses/gpl.txt             */
/*                                                                      */
/************************************************************************/

// DIST-Nx Commands
#define DIST_CMD_ENERGIZED   0x45
#define DIST_CMD_DEENERGIZED 0x44
#define DIST_CMD_ADPA_ON     0x4E
#define DIST_CMD_ADPA_OFF    0x4F

// DIST-Nx Registers
#define DIST_REG_VERSION       0x00
#define DIST_REG_VENDORID      0x08
#define DIST_REG_DEVICEID      0x10
#define DIST_REG_CMD           0x41
#define DIST_REG_DIST_LSB      0x42
#define DIST_REG_DIST_MSB      0x43
#define DIST_REG_VOLT_LSB      0x44
#define DIST_REG_VOLT_MSB      0x45
#define DIST_REG_MODULE_TYPE   0x50
#define DIST_REG_NUM_POINTS    0x51
#define DIST_REG_DIST_MIN_LSB  0x52
#define DIST_REG_DIST_MIN_MSB  0x53
#define DIST_REG_DIST_MAX_LSB  0x54
#define DIST_REG_DIST_MAX_MSB  0x55
#define DIST_REG_VOLT1_LSB     0x56
#define DIST_REG_VOLT1_MSB     0x57
#define DIST_REG_DIST1_LSB     0x58
#define DIST_REG_DIST1_MSB     0x59

void DISTNxSendCommand(byte port, byte cmd, byte addr) {
  byte cmdBuf[];
  ArrayBuild(cmdBuf, addr, DIST_REG_CMD, cmd);
  I2CWrite(port, 0, cmdBuf);
  int status = I2CCheckStatus(port);
  while (status > NO_ERR)
    status = I2CCheckStatus(port);
//  Stop(status < NO_ERR);
}

unsigned int DISTNxReadValue(byte port, byte reg, byte count, byte addr) {
  unsigned int result = 0;
  byte outBuf[], cmdBuf[];
  ArrayBuild(cmdBuf, addr, reg);
  if (I2CBytes(port, cmdBuf, count, outBuf)) {
    if (count == 2)
      result = outBuf[1]*256 + outBuf[0];
    else
      result = outBuf[0];
  }
  return result;
}

void DISTNxWriteInt(byte port, byte reg, int value, byte addr)
{

  byte cmdbuf[];
  byte nByteReady = 0;
	byte loop;
	byte v_hi;
	byte n;

	v_hi = value/0x100;

  ArrayBuild(cmdbuf, addr, reg, value, v_hi);

  loop = STAT_COMM_PENDING;
  while ( loop == STAT_COMM_PENDING ) {
    loop = I2CStatus(port, nByteReady);
  }

  // when the I2C bus is ready, send the message you built
  n = I2CWrite(port, 0, cmdbuf);
  while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);
}

