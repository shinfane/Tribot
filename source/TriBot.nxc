// A few things we need to know
// wheel diameter 5.6 cm.
// Full Wheel rotation: 17,6 cm
// Degrees per cm: 20,45
// Bot in place turn circle circumference: PI X 11,5cm = 36 cm.
// This means 1 Degree / mm.
//
// So turning 10 degrees eastwards: rotate the motors (turn mode) by 20 degrees.
// defined below

#define _PI 3.14159265358979323846264338327950288419716939937

#define WHEELDIAM 				5.6
#define BOT_WIDTH 				11.5

#define DEG_PER_CIRCLE 			360
#define CM_PER_ROTATION 		(WHEELDIAM * _PI)
#define MOT_DEG_PER_CM 			(DEG_PER_CIRCLE / CM_PER_ROTATION)
#define BOT_TURN_CIRCLE 		(PI * BOT_WIDTH)
#define CM_PER_BOTTURNDEGREE	(BOT_TURN_CIRCLE/DEG_PER_CIRCLE)
#define CM_PER_MOT_DEGREE		CM_PER_ROTATION / DEG_PER_CIRCLE

#define TURN_RATIO				(BOT_TURN_CIRCLE / (DEG_PER_CIRCLE / CM_PER_ROTATION ))
#define CLOCKWISE	true


#define THRESHOLD 25
#define NEAR 29 //cm
#define MIC SENSOR_2
#define RADARSTEP 20
#define RADARINDEX 360/RADARSTEP

#define RIGHT 1 
#define LEFT 0
#define FILENAME "track.txt"

// prototype 

task move();
task test_radar();

// decided to use mutexes, just to make sure that
//  tasks do not impact each other

struct path {
	int course;
	int distance;
} ;

mutex MotorMutex_B;
int heading=0;
int escape_heading, travel_distance=0;
int RadarResult[RADARINDEX];

unsigned int milivolt;


// File handling stuff

byte fileHandle;
short fileSize=512;
short bytesToFile;
string write,read;

///////////////////////////////////////////////////////////////
// Turn the robot  <degrees> degrees in the <turndir> direction
///////////////////////////////////////////////////////////////

void BotTurnDegrees(int degrees, bool turndir)
{

	int motordeg_A, dir,pressed;
	
	if (turndir) {
		dir=-100;
	} else
	{
		dir=100;
	}

	motordeg_A = degrees * CM_PER_BOTTURNDEGREE * MOT_DEG_PER_CM;

	// TextOut(0,LCD_LINE1,"StartH:");
	// TextOut(0,LCD_LINE2,"MotDeg:");
	// TextOut(0,LCD_LINE3,"Turn:");
	// TextOut(0,LCD_LINE4,"Dir:");
	// NumOut(40,LCD_LINE1,heading);
	// NumOut(40,LCD_LINE2,motordeg_A);
	// NumOut(40,LCD_LINE3,degrees);
	// NumOut(40,LCD_LINE4,dir);

	//	while(pressed <= 0){
	//		pressed = ButtonPressed(BTN4, true);     //watch for the button press
	//		Wait(100);
	//	}

	RotateMotorEx(OUT_AC,50,motordeg_A,dir,true,true);
	
	Wait(1000);
}


///////////////////////////////////////////////////////////////
// Read the compass data
///////////////////////////////////////////////////////////////


int read_compass()
{
	int i;
	
	i=SensorUS(IN_1);
	heading=i*360/255;
	Wait(20);
	return heading;
	
}


///////////////////////////////////////////////////////////////
// Turn the radar head full 360 and set escape route 
// towards the first free direction reported by US
///////////////////////////////////////////////////////////////

int radar_check()
{
	int i,tmp=0;
	escape_heading=0;
	
	
	for(int i=1;i<(360/RADARSTEP+1);i++) {
		RotateMotor(OUT_B,25,RADARSTEP);
		RadarResult[i-1]=SensorUS(S4);
		ClearScreen();
		if(RadarResult[i-1]>tmp)
		{
			tmp=RadarResult[i-1];
			escape_heading=i*RADARSTEP;
			TextOut(0,LCD_LINE3,"ESCAPE:");
			NumOut(50,LCD_LINE3,escape_heading);
		

			} else {
				PlayTone((1500-RadarResult[i-1]),100);
			}
		Wait(200);

	}
	RotateMotor(OUT_B,25,-360);
	
	return escape_heading;
	
	
}

///////////////////////////////////////////////////////////////
// Brand new, thanks to Duncan
// make bot turn reaching a given heading
// 0/360 North, 90 East, 180 South, 270 West
///////////////////////////////////////////////////////////////

void SetHeading(int degrees) {
	
	int current,shortest,tmpheading,motordeg_A;
	
	// int pressed=0;
	
	int dir=100;
	current=read_compass();
	
	tmpheading = degrees;
	
	shortest = tmpheading - current;
	
	
	if (shortest > 180)
	{
		shortest = shortest - 360;	
	}
	if (shortest < -180)
	{
		shortest = (shortest + 360) % 360;
	}

	motordeg_A = shortest * CM_PER_BOTTURNDEGREE * MOT_DEG_PER_CM;

	if (motordeg_A<0) dir=-100;

	RotateMotorEx(OUT_AC,50,motordeg_A,dir,true,true);
	
	ClearScreen();
	
	NumOut(0,LCD_LINE3,motordeg_A);
	NumOut(0,LCD_LINE4,shortest);
	NumOut(0,LCD_LINE5,read_compass());

	//while(pressed <= 0){
	//	pressed = ButtonPressed(BTN4, true);     //watch for the button press
	//	Wait(100);
	// }
	// pressed=0;

	

}


void drive_backward() {
	
	int backsignal;
	string tmp;

	// turn Sensor backwards
	
	Acquire(MotorMutex_B);
	RotateMotor(OUT_B,25,180);
	Release(MotorMutex_B);
	
	// read sensor
	backsignal=SensorUS(S4);
	PlayFile("ping.rso");
	

	if (backsignal>NEAR)
	{
		Wait(800);
		OnRev(OUT_AC,50); 
		Wait(500);
		Off(OUT_AC);
		
	}
	
	Acquire(MotorMutex_B);
	RotateMotor(OUT_B,25,-180);
	Release(MotorMutex_B);
	
	
	
}

///////////////////////////////////////////
// Turn to each side
// and check distance to next object
///////////////////////////////////////////

int check_sides() {
	
    int left_signal;
    int right_signal;
	string tmp;
	
    
    Wait(1000);
	Acquire(MotorMutex_B);
	
	// turn motor to the left and check US

    RotateMotor(OUT_B,25,90);
	
    left_signal=SensorUS(S4);
	PlayFile("ping.rso");

	Wait(1000);
	
	// turn motor to the right and check US
	
    RotateMotor(OUT_B,25,-180);
	
    right_signal=SensorUS(S4);
	PlayFile("ping.rso");

	Wait(1000);
	
	// rotate back to the front
    RotateMotor(OUT_B,25,90);
	
	Release(MotorMutex_B);
    Wait(1000);
	

    if (left_signal > right_signal)
    {
        return LEFT;
    }
    else
    {
		return RIGHT;
    }
    
    
}

////////////////////////////////////////////////////
// show various informations like heading and
// distance
////////////////////////////////////////////////////

task showinfo() {
	
	while(true) {

		// ClearScreen();
		
		travel_distance = MotorRotationCount(OUT_C) * CM_PER_MOT_DEGREE ;
		milivolt=BatteryLevel();
		TextOut(0,LCD_LINE4,"Power:");
		NumOut(0,LCD_LINE4,milivolt);
		TextOut(0,LCD_LINE5,"HEADING:");
		NumOut(50,LCD_LINE5, heading);
		TextOut(0,LCD_LINE6,"DIST:");
		NumOut(50,LCD_LINE6, travel_distance);
		
		Wait(1000);

	}
	
}


// CHANGED Task exits to test_radar as soon as it sees an obstacle
 

task move(){
    //    SetSensorLight(IN_3);
	
	int out;
	 ResetRotationCount(OUT_AC);
	 ResetRotationCount(OUT_B);
	
	
    while(true){
        
		  
        OnFwdSync(OUT_AC,50,0);
        while(SensorUS(S4)>NEAR);
		
		
        Off(OUT_AC);
		PlayFile("ping.rso");			
		heading=read_compass();
		
		drive_backward();
		ExitTo(test_radar);
		
       
			//         if (check_sides()==LEFT)
			//         {
			// OnFwdSync(OUT_AC,50,-100);
			//             
			//         } 
			//         else
			//         {
			// 
			// OnFwdSync(OUT_AC,50,100);
			// 
			//         }
			//         
			//         Wait(750);
			//         
			//         Off(OUT_AC);	
			// 
		
    }
}

task test_radar()
{
	int out;
    out=radar_check();
	BotTurnDegrees(out,CLOCKWISE);
	ExitTo(move);
	
}

task main(){

	int out;
	SetSensorLowspeed(IN_4);
	SetSensorLowspeed(IN_1);
	PlayTone(1000,100);
	Wait(2000);
	// 
	
	Precedes(move,showinfo);
}

